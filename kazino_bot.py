import telebot
from telebot import types
import time
import random

TOKEN = '8179628221:AAHD5uGen09w79wmhFZoDI1zKq2qYNrh_tM'
bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}  # user_id: {"balance": int, "state": str, "bet": int}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"))
    kb.add(types.KeyboardButton("üè¢ –ò–¥—Ç–∏ —Ä–∞–±–æ—Ç–∞—Ç—å"))
    kb.add(types.KeyboardButton("üé∞ –ö–∞–∑–∏–Ω–æ"))
    return kb

def games_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("ü™ô –û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞"))
    kb.add(types.KeyboardButton("‚úÇÔ∏è –ö–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞"))
    kb.add(types.KeyboardButton("üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É"))
    kb.add(types.KeyboardButton("üè† –õ–æ–±–±–∏"))
    return kb

def coin_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("–û—Ä–µ–ª"))
    kb.add(types.KeyboardButton("–†–µ—à–∫–∞"))
    kb.add(types.KeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏"))
    return kb

def rps_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("–ö–∞–º–µ–Ω—å"))
    kb.add(types.KeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã"))
    kb.add(types.KeyboardButton("–ë—É–º–∞–≥–∞"))
    kb.add(types.KeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏"))
    return kb

# --- –°—Ç–∞—Ä—Ç ---
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_data[user_id] = {"balance": 0, "state": "main", "bet": 10}  # —Å—Ç–∞–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üëã\n–Ø —Ç–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=main_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"balance": 0, "state": "main", "bet": 10}

    state = user_data[user_id]["state"]
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    if state == "working":
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢—ã —Å–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚è≥")
        return

    # –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        bot.send_message(message.chat.id, f"üíµ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']}$\nüí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data[user_id]['bet']}$")
        return

    elif text == "üè¢ –ò–¥—Ç–∏ —Ä–∞–±–æ—Ç–∞—Ç—å":
        bot.send_message(message.chat.id, "–¢—ã –ø–æ—à–µ–ª —Ä–∞–±–æ—Ç–∞—Ç—å... ‚è≥")
        user_data[user_id]["state"] = "working"
        time.sleep(3)  # –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        user_data[user_id]["balance"] += 20
        user_data[user_id]["state"] = "main"
        bot.send_message(message.chat.id, f"üíº –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª 20$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']}$",
                         reply_markup=main_keyboard())
        return

    elif text == "üé∞ –ö–∞–∑–∏–Ω–æ":
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! üé≤ –í—ã–±–∏—Ä–∞–π –∏–≥—Ä—É:", reply_markup=games_keyboard())
        user_data[user_id]["state"] = "casino"
        return

    # –ö–∞–∑–∏–Ω–æ
    if state == "casino":
        if text == "ü™ô –û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞":
            bot.send_message(message.chat.id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data[user_id]['bet']}$\n–í—ã–±–∏—Ä–∞–π: –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞", reply_markup=coin_keyboard())
            bot.register_next_step_handler(message, coin_game)
            return

        elif text == "‚úÇÔ∏è –ö–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞":
            bot.send_message(message.chat.id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data[user_id]['bet']}$\n–í—ã–±–∏—Ä–∞–π: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞", reply_markup=rps_keyboard())
            bot.register_next_step_handler(message, rps_game)
            return

        elif text == "üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É (—á–∏—Å–ª–æ):")
            bot.register_next_step_handler(message, change_bet)
            return

        elif text == "üè† –õ–æ–±–±–∏":
            bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–æ–±–±–∏ üè†", reply_markup=main_keyboard())
            user_data[user_id]["state"] = "main"
            return

        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é", reply_markup=games_keyboard())
            return

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ ---
def change_bet(message):
    user_id = message.from_user.id
    try:
        new_bet = int(message.text)
        if new_bet <= 0:
            raise ValueError
        if new_bet > user_data[user_id]["balance"]:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!")
            return
        user_data[user_id]["bet"] = new_bet
        bot.send_message(message.chat.id, f"üíµ –°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_bet}$", reply_markup=games_keyboard())
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç–∞–≤–∫–∏!")
        bot.register_next_step_handler(message, change_bet)

# --- –û—Ä–µ–ª/–†–µ—à–∫–∞ ---
def coin_game(message):
    user_id = message.from_user.id
    choice = message.text.lower()

    if choice == "üè† –Ω–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏":
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–æ–±–±–∏ üè†", reply_markup=main_keyboard())
        user_data[user_id]["state"] = "main"
        return

    if choice not in ["–æ—Ä–µ–ª", "—Ä–µ—à–∫–∞"]:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í—ã–±–µ—Ä–∏ –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞")
        bot.register_next_step_handler(message, coin_game)
        return

    bet = user_data[user_id]["bet"]
    if bet > user_data[user_id]["balance"]:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!")
        bot.register_next_step_handler(message, coin_game)
        return

    result = random.choice(["–æ—Ä–µ–ª", "—Ä–µ—à–∫–∞"])
    if choice == result:
        user_data[user_id]["balance"] += bet
        bot.send_message(message.chat.id, f"ü™ô –í—ã–ø–∞–ª–æ: {result.capitalize()}!\nüéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']}$")
    else:
        user_data[user_id]["balance"] -= bet
        bot.send_message(message.chat.id, f"ü™ô –í—ã–ø–∞–ª–æ: {result.capitalize()}!\nüò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']}$")

    bot.send_message(message.chat.id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data[user_id]['bet']}$\n–í—ã–±–∏—Ä–∞–π: –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞", reply_markup=coin_keyboard())
    bot.register_next_step_handler(message, coin_game)

# --- –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ ---
def rps_game(message):
    user_id = message.from_user.id
    choice = message.text.lower()

    if choice == "üè† –Ω–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏":
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–æ–±–±–∏ üè†", reply_markup=main_keyboard())
        user_data[user_id]["state"] = "main"
        return

    options = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
    if choice not in options:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í—ã–±–µ—Ä–∏ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞")
        bot.register_next_step_handler(message, rps_game)
        return

    bet = user_data[user_id]["bet"]
    if bet > user_data[user_id]["balance"]:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!")
        bot.register_next_step_handler(message, rps_game)
        return

    bot_choice = random.choice(options)
    win_conditions = {"–∫–∞–º–µ–Ω—å": "–Ω–æ–∂–Ω–∏—Ü—ã", "–Ω–æ–∂–Ω–∏—Ü—ã": "–±—É–º–∞–≥–∞", "–±—É–º–∞–≥–∞": "–∫–∞–º–µ–Ω—å"}

    if choice == bot_choice:
        bot.send_message(message.chat.id, f"ü§ù –ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_choice.capitalize()}. –ù–∏—á—å—è!")
    elif win_conditions[choice] == bot_choice:
        user_data[user_id]["balance"] += bet
        bot.send_message(message.chat.id, f"üèÜ –ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_choice.capitalize()}.\nüéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']}$")
    else:
        user_data[user_id]["balance"] -= bet
        bot.send_message(message.chat.id, f"üò¢ –ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_choice.capitalize()}.\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet}$\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']}$")

    bot.send_message(message.chat.id, f"üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data[user_id]['bet']}$\n–í—ã–±–∏—Ä–∞–π: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞", reply_markup=rps_keyboard())
    bot.register_next_step_handler(message, rps_game)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º ---
if __name__ == "__main__":
    while True:
        try:
            print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
